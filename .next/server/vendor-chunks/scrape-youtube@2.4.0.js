"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/scrape-youtube@2.4.0";
exports.ids = ["vendor-chunks/scrape-youtube@2.4.0"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/scrape-youtube@2.4.0/node_modules/scrape-youtube/lib/index.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/.pnpm/scrape-youtube@2.4.0/node_modules/scrape-youtube/lib/index.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nvar interface_1 = __webpack_require__(/*! ./interface */ \"(rsc)/./node_modules/.pnpm/scrape-youtube@2.4.0/node_modules/scrape-youtube/lib/interface.js\");\r\nvar parser_1 = __webpack_require__(/*! ./parser */ \"(rsc)/./node_modules/.pnpm/scrape-youtube@2.4.0/node_modules/scrape-youtube/lib/parser.js\");\r\nvar https_1 = __webpack_require__(/*! https */ \"https\");\r\n__export(__webpack_require__(/*! ./interface */ \"(rsc)/./node_modules/.pnpm/scrape-youtube@2.4.0/node_modules/scrape-youtube/lib/interface.js\"));\r\nvar Youtube = /** @class */ (function () {\r\n    function Youtube() {\r\n        /**\r\n         * Enable debugging for extra information during each search\r\n         */\r\n        this.debug = false;\r\n        this.host = 'https://www.youtube.com';\r\n        this.path = '/results';\r\n    }\r\n    Youtube.prototype.getURL = function (query, options) {\r\n        var url = new URL(this.path, this.host);\r\n        var sp = interface_1.ResultFilter[(options.type || 'video')];\r\n        url.search = new URLSearchParams(__assign({ search_query: query }, (options.params || {}))).toString();\r\n        if (options.sp)\r\n            sp = options.sp;\r\n        return url.href + '&sp=' + sp;\r\n    };\r\n    Youtube.prototype.extractRenderData = function (page) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            try {\r\n                // #1 - Remove line breaks\r\n                page = page.split('\\n').join('');\r\n                // #2 - Split at start of data\r\n                page = page.split('var ytInitialData')[1];\r\n                // #3 - Remove the first equals sign\r\n                var spot = page.split('=');\r\n                spot.shift();\r\n                // #4 - Join the split data and split again at the closing tag\r\n                var data = spot.join('=').split(';</script>')[0];\r\n                var render = null;\r\n                var contents = [];\r\n                var primary = JSON.parse(data).contents.twoColumnSearchResultsRenderer.primaryContents;\r\n                // The renderer we want. This should contain all search result information\r\n                if (primary['sectionListRenderer']) {\r\n                    if (_this.debug)\r\n                        console.log('[ytInitialData] sectionListRenderer');\r\n                    // Filter only the search results, exclude ads and promoted content\r\n                    render = primary.sectionListRenderer.contents.filter(function (item) {\r\n                        return (item.itemSectionRenderer &&\r\n                            item.itemSectionRenderer.contents &&\r\n                            item.itemSectionRenderer.contents.filter(function (c) { return c['videoRenderer'] || c['playlistRenderer'] || c['channelRenderer']; }).length);\r\n                    });\r\n                    if (render.length)\r\n                        contents = render.shift().itemSectionRenderer.contents;\r\n                }\r\n                // YouTube occasionally switches to a rich grid renderer.\r\n                // More testing will be needed to see how different this is from sectionListRenderer\r\n                if (primary['richGridRenderer']) {\r\n                    if (_this.debug)\r\n                        console.log('[ytInitialData] richGridRenderer');\r\n                    contents = primary.richGridRenderer.contents\r\n                        .filter(function (item) {\r\n                        return item.richItemRenderer && item.richItemRenderer.content;\r\n                    })\r\n                        .map(function (item) { return item.richItemRenderer.content; });\r\n                }\r\n                resolve(contents);\r\n            }\r\n            catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Parse the data extracted from the page to match each interface\r\n     * @param data Video Renderer Data\r\n     */\r\n    Youtube.prototype.parseData = function (data) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            try {\r\n                var results_1 = {\r\n                    videos: [],\r\n                    playlists: [],\r\n                    streams: [],\r\n                    channels: []\r\n                };\r\n                data.forEach(function (item) {\r\n                    if (item['channelRenderer']) {\r\n                        try {\r\n                            var result = parser_1.getChannelRenderData(item['channelRenderer']);\r\n                            results_1.channels.push(result);\r\n                        }\r\n                        catch (e) {\r\n                            if (_this.debug)\r\n                                console.log(e);\r\n                        }\r\n                    }\r\n                    if (item['videoRenderer'] && item['videoRenderer']['lengthText']) {\r\n                        try {\r\n                            var result = parser_1.getVideoData(item['videoRenderer']);\r\n                            results_1.videos.push(result);\r\n                        }\r\n                        catch (e) {\r\n                            if (_this.debug)\r\n                                console.log(e);\r\n                        }\r\n                    }\r\n                    if (item['videoRenderer'] && !item['videoRenderer']['lengthText']) {\r\n                        try {\r\n                            var result = parser_1.getStreamData(item['videoRenderer']);\r\n                            results_1.streams.push(result);\r\n                        }\r\n                        catch (e) {\r\n                            if (_this.debug)\r\n                                console.log(e);\r\n                        }\r\n                    }\r\n                    if (item['playlistRenderer']) {\r\n                        try {\r\n                            var result = parser_1.getPlaylistData(item['playlistRenderer']);\r\n                            results_1.playlists.push(result);\r\n                        }\r\n                        catch (e) {\r\n                            if (_this.debug)\r\n                                console.log(e);\r\n                        }\r\n                    }\r\n                });\r\n                resolve(results_1);\r\n            }\r\n            catch (e) {\r\n                console.warn(e);\r\n                reject('Fatal error when parsing result data. Please report this on GitHub');\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Load the page and scrape the data\r\n     * @param query Search query\r\n     * @param options Search options\r\n     */\r\n    Youtube.prototype.load = function (query, options) {\r\n        if (options === void 0) { options = {}; }\r\n        var url = this.getURL(query, options);\r\n        if (this.debug)\r\n            console.log(url);\r\n        var request = options.request || {};\r\n        return new Promise(function (resolve, reject) {\r\n            https_1.get(Object.assign(new URL(url), request), function (res) {\r\n                res.setEncoding('utf8');\r\n                var data = '';\r\n                res.on('data', function (chunk) { return (data += chunk); });\r\n                res.on('end', function () { return resolve(data); });\r\n            }).on('error', reject);\r\n        });\r\n    };\r\n    Youtube.prototype.search = function (query, options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {\r\n            var page, data, results, e_1;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 4, , 5]);\r\n                        return [4 /*yield*/, this.load(query, options)];\r\n                    case 1:\r\n                        page = _a.sent();\r\n                        return [4 /*yield*/, this.extractRenderData(page)];\r\n                    case 2:\r\n                        data = _a.sent();\r\n                        return [4 /*yield*/, this.parseData(data)];\r\n                    case 3:\r\n                        results = _a.sent();\r\n                        resolve(results);\r\n                        return [3 /*break*/, 5];\r\n                    case 4:\r\n                        e_1 = _a.sent();\r\n                        reject(e_1);\r\n                        return [3 /*break*/, 5];\r\n                    case 5: return [2 /*return*/];\r\n                }\r\n            });\r\n        }); });\r\n    };\r\n    return Youtube;\r\n}());\r\nexports.youtube = new Youtube();\r\nexports.search = function (query, options) {\r\n    if (options === void 0) { options = {}; }\r\n    return exports.youtube.search(query, options);\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vc2NyYXBlLXlvdXR1YmVAMi40LjAvbm9kZV9tb2R1bGVzL3NjcmFwZS15b3V0dWJlL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQSxpREFBaUQsT0FBTztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsK0RBQStELGlCQUFpQjtBQUM1RztBQUNBLG9DQUFvQyxNQUFNLCtCQUErQixZQUFZO0FBQ3JGLG1DQUFtQyxNQUFNLG1DQUFtQyxZQUFZO0FBQ3hGLGdDQUFnQztBQUNoQztBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsY0FBYyw2QkFBNkIsMEJBQTBCLGNBQWMscUJBQXFCO0FBQ3hHLGlCQUFpQixvREFBb0QscUVBQXFFLGNBQWM7QUFDeEosdUJBQXVCLHNCQUFzQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0M7QUFDeEMsbUNBQW1DLFNBQVM7QUFDNUMsbUNBQW1DLFdBQVcsVUFBVTtBQUN4RCwwQ0FBMEMsY0FBYztBQUN4RDtBQUNBLDhHQUE4RyxPQUFPO0FBQ3JILGlGQUFpRixpQkFBaUI7QUFDbEcseURBQXlELGdCQUFnQixRQUFRO0FBQ2pGLCtDQUErQyxnQkFBZ0IsZ0JBQWdCO0FBQy9FO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQSxVQUFVLFlBQVksYUFBYSxTQUFTLFVBQVU7QUFDdEQsb0NBQW9DLFNBQVM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBa0IsbUJBQU8sQ0FBQyxpSEFBYTtBQUN2QyxlQUFlLG1CQUFPLENBQUMsMkdBQVU7QUFDakMsY0FBYyxtQkFBTyxDQUFDLG9CQUFPO0FBQzdCLFNBQVMsbUJBQU8sQ0FBQyxpSEFBYTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0QscUJBQXFCLHVCQUF1QjtBQUNoRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0ZBQW9GLDZFQUE2RTtBQUNqSyxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQiwrQ0FBK0MsdUNBQXVDO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELHlCQUF5QjtBQUMzRSw0Q0FBNEMsdUJBQXVCO0FBQ25FLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDLHdEQUF3RDtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTLElBQUk7QUFDYjtBQUNBO0FBQ0EsQ0FBQztBQUNELGVBQWU7QUFDZixjQUFjO0FBQ2QsOEJBQThCO0FBQzlCO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL21pa2UvQ09ERS9hY2Nlc3MteW91dHViZS9ub2RlX21vZHVsZXMvLnBucG0vc2NyYXBlLXlvdXR1YmVAMi40LjAvbm9kZV9tb2R1bGVzL3NjcmFwZS15b3V0dWJlL2xpYi9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxyXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59O1xyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufTtcclxuZnVuY3Rpb24gX19leHBvcnQobSkge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIGludGVyZmFjZV8xID0gcmVxdWlyZShcIi4vaW50ZXJmYWNlXCIpO1xyXG52YXIgcGFyc2VyXzEgPSByZXF1aXJlKFwiLi9wYXJzZXJcIik7XHJcbnZhciBodHRwc18xID0gcmVxdWlyZShcImh0dHBzXCIpO1xyXG5fX2V4cG9ydChyZXF1aXJlKFwiLi9pbnRlcmZhY2VcIikpO1xyXG52YXIgWW91dHViZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFlvdXR1YmUoKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRW5hYmxlIGRlYnVnZ2luZyBmb3IgZXh0cmEgaW5mb3JtYXRpb24gZHVyaW5nIGVhY2ggc2VhcmNoXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5kZWJ1ZyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaG9zdCA9ICdodHRwczovL3d3dy55b3V0dWJlLmNvbSc7XHJcbiAgICAgICAgdGhpcy5wYXRoID0gJy9yZXN1bHRzJztcclxuICAgIH1cclxuICAgIFlvdXR1YmUucHJvdG90eXBlLmdldFVSTCA9IGZ1bmN0aW9uIChxdWVyeSwgb3B0aW9ucykge1xyXG4gICAgICAgIHZhciB1cmwgPSBuZXcgVVJMKHRoaXMucGF0aCwgdGhpcy5ob3N0KTtcclxuICAgICAgICB2YXIgc3AgPSBpbnRlcmZhY2VfMS5SZXN1bHRGaWx0ZXJbKG9wdGlvbnMudHlwZSB8fCAndmlkZW8nKV07XHJcbiAgICAgICAgdXJsLnNlYXJjaCA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoX19hc3NpZ24oeyBzZWFyY2hfcXVlcnk6IHF1ZXJ5IH0sIChvcHRpb25zLnBhcmFtcyB8fCB7fSkpKS50b1N0cmluZygpO1xyXG4gICAgICAgIGlmIChvcHRpb25zLnNwKVxyXG4gICAgICAgICAgICBzcCA9IG9wdGlvbnMuc3A7XHJcbiAgICAgICAgcmV0dXJuIHVybC5ocmVmICsgJyZzcD0nICsgc3A7XHJcbiAgICB9O1xyXG4gICAgWW91dHViZS5wcm90b3R5cGUuZXh0cmFjdFJlbmRlckRhdGEgPSBmdW5jdGlvbiAocGFnZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIC8vICMxIC0gUmVtb3ZlIGxpbmUgYnJlYWtzXHJcbiAgICAgICAgICAgICAgICBwYWdlID0gcGFnZS5zcGxpdCgnXFxuJykuam9pbignJyk7XHJcbiAgICAgICAgICAgICAgICAvLyAjMiAtIFNwbGl0IGF0IHN0YXJ0IG9mIGRhdGFcclxuICAgICAgICAgICAgICAgIHBhZ2UgPSBwYWdlLnNwbGl0KCd2YXIgeXRJbml0aWFsRGF0YScpWzFdO1xyXG4gICAgICAgICAgICAgICAgLy8gIzMgLSBSZW1vdmUgdGhlIGZpcnN0IGVxdWFscyBzaWduXHJcbiAgICAgICAgICAgICAgICB2YXIgc3BvdCA9IHBhZ2Uuc3BsaXQoJz0nKTtcclxuICAgICAgICAgICAgICAgIHNwb3Quc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgIC8vICM0IC0gSm9pbiB0aGUgc3BsaXQgZGF0YSBhbmQgc3BsaXQgYWdhaW4gYXQgdGhlIGNsb3NpbmcgdGFnXHJcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHNwb3Quam9pbignPScpLnNwbGl0KCc7PC9zY3JpcHQ+JylbMF07XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVuZGVyID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHZhciBjb250ZW50cyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgdmFyIHByaW1hcnkgPSBKU09OLnBhcnNlKGRhdGEpLmNvbnRlbnRzLnR3b0NvbHVtblNlYXJjaFJlc3VsdHNSZW5kZXJlci5wcmltYXJ5Q29udGVudHM7XHJcbiAgICAgICAgICAgICAgICAvLyBUaGUgcmVuZGVyZXIgd2Ugd2FudC4gVGhpcyBzaG91bGQgY29udGFpbiBhbGwgc2VhcmNoIHJlc3VsdCBpbmZvcm1hdGlvblxyXG4gICAgICAgICAgICAgICAgaWYgKHByaW1hcnlbJ3NlY3Rpb25MaXN0UmVuZGVyZXInXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5kZWJ1ZylcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1t5dEluaXRpYWxEYXRhXSBzZWN0aW9uTGlzdFJlbmRlcmVyJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gRmlsdGVyIG9ubHkgdGhlIHNlYXJjaCByZXN1bHRzLCBleGNsdWRlIGFkcyBhbmQgcHJvbW90ZWQgY29udGVudFxyXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlciA9IHByaW1hcnkuc2VjdGlvbkxpc3RSZW5kZXJlci5jb250ZW50cy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChpdGVtLml0ZW1TZWN0aW9uUmVuZGVyZXIgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uaXRlbVNlY3Rpb25SZW5kZXJlci5jb250ZW50cyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5pdGVtU2VjdGlvblJlbmRlcmVyLmNvbnRlbnRzLmZpbHRlcihmdW5jdGlvbiAoYykgeyByZXR1cm4gY1sndmlkZW9SZW5kZXJlciddIHx8IGNbJ3BsYXlsaXN0UmVuZGVyZXInXSB8fCBjWydjaGFubmVsUmVuZGVyZXInXTsgfSkubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVuZGVyLmxlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudHMgPSByZW5kZXIuc2hpZnQoKS5pdGVtU2VjdGlvblJlbmRlcmVyLmNvbnRlbnRzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gWW91VHViZSBvY2Nhc2lvbmFsbHkgc3dpdGNoZXMgdG8gYSByaWNoIGdyaWQgcmVuZGVyZXIuXHJcbiAgICAgICAgICAgICAgICAvLyBNb3JlIHRlc3Rpbmcgd2lsbCBiZSBuZWVkZWQgdG8gc2VlIGhvdyBkaWZmZXJlbnQgdGhpcyBpcyBmcm9tIHNlY3Rpb25MaXN0UmVuZGVyZXJcclxuICAgICAgICAgICAgICAgIGlmIChwcmltYXJ5WydyaWNoR3JpZFJlbmRlcmVyJ10pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuZGVidWcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbeXRJbml0aWFsRGF0YV0gcmljaEdyaWRSZW5kZXJlcicpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRzID0gcHJpbWFyeS5yaWNoR3JpZFJlbmRlcmVyLmNvbnRlbnRzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0ucmljaEl0ZW1SZW5kZXJlciAmJiBpdGVtLnJpY2hJdGVtUmVuZGVyZXIuY29udGVudDtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChpdGVtKSB7IHJldHVybiBpdGVtLnJpY2hJdGVtUmVuZGVyZXIuY29udGVudDsgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKGNvbnRlbnRzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJzZSB0aGUgZGF0YSBleHRyYWN0ZWQgZnJvbSB0aGUgcGFnZSB0byBtYXRjaCBlYWNoIGludGVyZmFjZVxyXG4gICAgICogQHBhcmFtIGRhdGEgVmlkZW8gUmVuZGVyZXIgRGF0YVxyXG4gICAgICovXHJcbiAgICBZb3V0dWJlLnByb3RvdHlwZS5wYXJzZURhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHRzXzEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmlkZW9zOiBbXSxcclxuICAgICAgICAgICAgICAgICAgICBwbGF5bGlzdHM6IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0cmVhbXM6IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5uZWxzOiBbXVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGRhdGEuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtWydjaGFubmVsUmVuZGVyZXInXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHBhcnNlcl8xLmdldENoYW5uZWxSZW5kZXJEYXRhKGl0ZW1bJ2NoYW5uZWxSZW5kZXJlciddKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHNfMS5jaGFubmVscy5wdXNoKHJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5kZWJ1ZylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbVsndmlkZW9SZW5kZXJlciddICYmIGl0ZW1bJ3ZpZGVvUmVuZGVyZXInXVsnbGVuZ3RoVGV4dCddKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gcGFyc2VyXzEuZ2V0VmlkZW9EYXRhKGl0ZW1bJ3ZpZGVvUmVuZGVyZXInXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzXzEudmlkZW9zLnB1c2gocmVzdWx0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLmRlYnVnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtWyd2aWRlb1JlbmRlcmVyJ10gJiYgIWl0ZW1bJ3ZpZGVvUmVuZGVyZXInXVsnbGVuZ3RoVGV4dCddKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gcGFyc2VyXzEuZ2V0U3RyZWFtRGF0YShpdGVtWyd2aWRlb1JlbmRlcmVyJ10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0c18xLnN0cmVhbXMucHVzaChyZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuZGVidWcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW1bJ3BsYXlsaXN0UmVuZGVyZXInXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHBhcnNlcl8xLmdldFBsYXlsaXN0RGF0YShpdGVtWydwbGF5bGlzdFJlbmRlcmVyJ10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0c18xLnBsYXlsaXN0cy5wdXNoKHJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5kZWJ1ZylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHRzXzEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oZSk7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoJ0ZhdGFsIGVycm9yIHdoZW4gcGFyc2luZyByZXN1bHQgZGF0YS4gUGxlYXNlIHJlcG9ydCB0aGlzIG9uIEdpdEh1YicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBMb2FkIHRoZSBwYWdlIGFuZCBzY3JhcGUgdGhlIGRhdGFcclxuICAgICAqIEBwYXJhbSBxdWVyeSBTZWFyY2ggcXVlcnlcclxuICAgICAqIEBwYXJhbSBvcHRpb25zIFNlYXJjaCBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIFlvdXR1YmUucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiAocXVlcnksIG9wdGlvbnMpIHtcclxuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxyXG4gICAgICAgIHZhciB1cmwgPSB0aGlzLmdldFVSTChxdWVyeSwgb3B0aW9ucyk7XHJcbiAgICAgICAgaWYgKHRoaXMuZGVidWcpXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHVybCk7XHJcbiAgICAgICAgdmFyIHJlcXVlc3QgPSBvcHRpb25zLnJlcXVlc3QgfHwge307XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgaHR0cHNfMS5nZXQoT2JqZWN0LmFzc2lnbihuZXcgVVJMKHVybCksIHJlcXVlc3QpLCBmdW5jdGlvbiAocmVzKSB7XHJcbiAgICAgICAgICAgICAgICByZXMuc2V0RW5jb2RpbmcoJ3V0ZjgnKTtcclxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gJyc7XHJcbiAgICAgICAgICAgICAgICByZXMub24oJ2RhdGEnLCBmdW5jdGlvbiAoY2h1bmspIHsgcmV0dXJuIChkYXRhICs9IGNodW5rKTsgfSk7XHJcbiAgICAgICAgICAgICAgICByZXMub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlc29sdmUoZGF0YSk7IH0pO1xyXG4gICAgICAgICAgICB9KS5vbignZXJyb3InLCByZWplY3QpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFlvdXR1YmUucHJvdG90eXBlLnNlYXJjaCA9IGZ1bmN0aW9uIChxdWVyeSwgb3B0aW9ucykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyByZXR1cm4gX19hd2FpdGVyKF90aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcGFnZSwgZGF0YSwgcmVzdWx0cywgZV8xO1xyXG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzAsIDQsICwgNV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmxvYWQocXVlcnksIG9wdGlvbnMpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2UgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuZXh0cmFjdFJlbmRlckRhdGEocGFnZSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5wYXJzZURhdGEoZGF0YSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0cyA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHRzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlXzEgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlXzEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA1XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7IH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBZb3V0dWJlO1xyXG59KCkpO1xyXG5leHBvcnRzLnlvdXR1YmUgPSBuZXcgWW91dHViZSgpO1xyXG5leHBvcnRzLnNlYXJjaCA9IGZ1bmN0aW9uIChxdWVyeSwgb3B0aW9ucykge1xyXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cclxuICAgIHJldHVybiBleHBvcnRzLnlvdXR1YmUuc2VhcmNoKHF1ZXJ5LCBvcHRpb25zKTtcclxufTtcclxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/scrape-youtube@2.4.0/node_modules/scrape-youtube/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/scrape-youtube@2.4.0/node_modules/scrape-youtube/lib/interface.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/.pnpm/scrape-youtube@2.4.0/node_modules/scrape-youtube/lib/interface.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nvar ResultType;\r\n(function (ResultType) {\r\n    ResultType[\"any\"] = \"any\";\r\n    ResultType[\"video\"] = \"video\";\r\n    ResultType[\"channel\"] = \"channel\";\r\n    ResultType[\"playlist\"] = \"playlist\";\r\n    ResultType[\"movie\"] = \"movie\";\r\n    ResultType[\"live\"] = \"live\";\r\n})(ResultType = exports.ResultType || (exports.ResultType = {}));\r\nexports.ResultFilter = (_a = {},\r\n    _a[ResultType.any] = 'CAA%253D',\r\n    _a[ResultType.video] = 'EgIQAQ%253D%253D',\r\n    _a[ResultType.channel] = 'EgIQAg%253D%253D',\r\n    _a[ResultType.playlist] = 'EgIQAw%253D%253D',\r\n    _a[ResultType.movie] = 'EgIQBA%253D%253D',\r\n    _a[ResultType.live] = 'EgJAAQ%253D%253D',\r\n    _a);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vc2NyYXBlLXlvdXR1YmVAMi40LjAvbm9kZV9tb2R1bGVzL3NjcmFwZS15b3V0dWJlL2xpYi9pbnRlcmZhY2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxzQ0FBc0Msa0JBQWtCLEtBQUs7QUFDOUQsb0JBQW9CLFdBQVc7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL21pa2UvQ09ERS9hY2Nlc3MteW91dHViZS9ub2RlX21vZHVsZXMvLnBucG0vc2NyYXBlLXlvdXR1YmVAMi40LjAvbm9kZV9tb2R1bGVzL3NjcmFwZS15b3V0dWJlL2xpYi9pbnRlcmZhY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfYTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgUmVzdWx0VHlwZTtcclxuKGZ1bmN0aW9uIChSZXN1bHRUeXBlKSB7XHJcbiAgICBSZXN1bHRUeXBlW1wiYW55XCJdID0gXCJhbnlcIjtcclxuICAgIFJlc3VsdFR5cGVbXCJ2aWRlb1wiXSA9IFwidmlkZW9cIjtcclxuICAgIFJlc3VsdFR5cGVbXCJjaGFubmVsXCJdID0gXCJjaGFubmVsXCI7XHJcbiAgICBSZXN1bHRUeXBlW1wicGxheWxpc3RcIl0gPSBcInBsYXlsaXN0XCI7XHJcbiAgICBSZXN1bHRUeXBlW1wibW92aWVcIl0gPSBcIm1vdmllXCI7XHJcbiAgICBSZXN1bHRUeXBlW1wibGl2ZVwiXSA9IFwibGl2ZVwiO1xyXG59KShSZXN1bHRUeXBlID0gZXhwb3J0cy5SZXN1bHRUeXBlIHx8IChleHBvcnRzLlJlc3VsdFR5cGUgPSB7fSkpO1xyXG5leHBvcnRzLlJlc3VsdEZpbHRlciA9IChfYSA9IHt9LFxyXG4gICAgX2FbUmVzdWx0VHlwZS5hbnldID0gJ0NBQSUyNTNEJyxcclxuICAgIF9hW1Jlc3VsdFR5cGUudmlkZW9dID0gJ0VnSVFBUSUyNTNEJTI1M0QnLFxyXG4gICAgX2FbUmVzdWx0VHlwZS5jaGFubmVsXSA9ICdFZ0lRQWclMjUzRCUyNTNEJyxcclxuICAgIF9hW1Jlc3VsdFR5cGUucGxheWxpc3RdID0gJ0VnSVFBdyUyNTNEJTI1M0QnLFxyXG4gICAgX2FbUmVzdWx0VHlwZS5tb3ZpZV0gPSAnRWdJUUJBJTI1M0QlMjUzRCcsXHJcbiAgICBfYVtSZXN1bHRUeXBlLmxpdmVdID0gJ0VnSkFBUSUyNTNEJTI1M0QnLFxyXG4gICAgX2EpO1xyXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/scrape-youtube@2.4.0/node_modules/scrape-youtube/lib/interface.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/scrape-youtube@2.4.0/node_modules/scrape-youtube/lib/parser.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/.pnpm/scrape-youtube@2.4.0/node_modules/scrape-youtube/lib/parser.js ***!
  \*******************************************************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n/**\r\n * Fetch all badges the channel has\r\n * @param video Video Renderer\r\n */\r\nvar getChannelBadges = function (video) {\r\n    var ownerBadges = video.ownerBadges;\r\n    return ownerBadges ? ownerBadges.map(function (badge) { return badge['metadataBadgeRenderer']['style']; }) : [];\r\n};\r\n/**\r\n * Attempt to find out if the channel is verified\r\n * @param video Video Renderer\r\n */\r\nvar isVerified = function (video) {\r\n    var badges = getChannelBadges(video);\r\n    return badges.includes('BADGE_STYLE_TYPE_VERIFIED_ARTIST') || badges.includes('BADGE_STYLE_TYPE_VERIFIED');\r\n};\r\n/**\r\n * Attempt to fetch channel link\r\n * @param id Channel ID\r\n * @param handle Channel Handle\r\n */\r\nvar getChannelLink = function (id, handle) {\r\n    return handle ? 'https://www.youtube.com/' + handle : 'https://www.youtube.com/channel/' + id;\r\n};\r\n/**\r\n * Compresses the \"runs\" texts into a single string.\r\n * @param key Video Renderer key\r\n */\r\nvar compress = function (key) {\r\n    return (key && key['runs'] ? key['runs'].map(function (v) { return v.text; }) : []).join('');\r\n};\r\n/**\r\n * Parse an hh:mm:ss timestamp into total seconds\r\n * @param text hh:mm:ss\r\n */\r\nvar parseDuration = function (text) {\r\n    var nums = text.split(':');\r\n    var sum = 0;\r\n    var multi = 1;\r\n    while (nums.length > 0) {\r\n        sum += multi * parseInt(nums.pop() || '-1', 10);\r\n        multi *= 60;\r\n    }\r\n    return sum;\r\n};\r\n/**\r\n * Sometimes the upload date is not available. YouTube is to blame, not this package.\r\n * @param video Video Renderer\r\n */\r\nvar getUploadDate = function (video) {\r\n    return (video.publishedTimeText ? video.publishedTimeText.simpleText : '').replace('Streamed', '').trim();\r\n};\r\n/**\r\n * Fetch the number of users watching a live stream\r\n * @param result Video Renderer\r\n */\r\nvar getWatchers = function (result) {\r\n    try {\r\n        return +result.viewCountText.runs[0].text.replace(/[^0-9]/g, '');\r\n    }\r\n    catch (e) {\r\n        return 0;\r\n    }\r\n};\r\n/**\r\n * Some paid movies do not have views\r\n * @param video Video Renderer\r\n */\r\nvar getViews = function (video) {\r\n    try {\r\n        return +video.viewCountText.simpleText.replace(/[^0-9]/g, '');\r\n    }\r\n    catch (e) {\r\n        return 0;\r\n    }\r\n};\r\n/**\r\n * Get the video count from the channel renderer\r\n * @param channel Channel Renderer\r\n */\r\nvar getVideoCount = function (channel) {\r\n    try {\r\n        return +channel.videoCountText.runs[0].text.replace(/[^0-9]/g, '');\r\n    }\r\n    catch (e) {\r\n        return 0;\r\n    }\r\n};\r\n/**\r\n * Attempt to get the subscriber count.\r\n * This can end up being a string like 50k\r\n * @param channel Channel Renderer\r\n */\r\nvar getSubscriberCount = function (channel) {\r\n    try {\r\n        // YouTube started using the channel handle in \"subscriberCountText\"\r\n        // Really not sure what the logic was there.\r\n        var samples = [channel.subscriberCountText.simpleText, channel.videoCountText.simpleText];\r\n        for (var _i = 0, samples_1 = samples; _i < samples_1.length; _i++) {\r\n            var item = samples_1[_i];\r\n            if (item.includes('subscribers')) {\r\n                return item.split(' ').shift();\r\n            }\r\n        }\r\n        return '0';\r\n    }\r\n    catch (e) {\r\n        return '0';\r\n    }\r\n};\r\n/**\r\n * Convert subscriber count to number\r\n * @param channel Channel Renderer\r\n * @returns number\r\n */\r\nvar convertSubs = function (channel) {\r\n    try {\r\n        var count = getSubscriberCount(channel);\r\n        // If there's no K, M or B at the end.\r\n        if (!isNaN(+count))\r\n            return +count;\r\n        var char = count.slice(-1);\r\n        var slicedCount = Number(count.slice(0, -1));\r\n        switch (char.toLowerCase()) {\r\n            case 'k':\r\n                slicedCount *= 1000;\r\n                break;\r\n            case 'm':\r\n                slicedCount *= 1e6;\r\n                break;\r\n            case 'b':\r\n                slicedCount *= 1e9;\r\n                break;\r\n        }\r\n        return ~~slicedCount;\r\n    }\r\n    catch (error) {\r\n        return 0;\r\n    }\r\n};\r\n/**\r\n * Attempt to fetch the channel thumbnail\r\n * @param video Channel Renderer\r\n */\r\nvar getChannelThumbnail = function (video) {\r\n    try {\r\n        var thumbRenders = video.channelThumbnailSupportedRenderers;\r\n        var url = thumbRenders.channelThumbnailWithLinkRenderer.thumbnail.thumbnails[0].url;\r\n        return url.split('=').shift() + '=s0?imgmax=0';\r\n    }\r\n    catch (e) {\r\n        // Return a default youtube avatar when the channel thumbnail is not available (in playlists)\r\n        return \"https://www.gstatic.com/youtube/img/originals/promo/ytr-logo-for-search_160x160.png\";\r\n    }\r\n};\r\nvar getVideoThumbnail = function (id) {\r\n    // This doesn't always work, unfortunately\r\n    // return `https://i.ytimg.com/vi/${id}/maxresdefault.jpg`;\r\n    return \"https://i.ytimg.com/vi/\" + id + \"/hqdefault.jpg\";\r\n};\r\n/**\r\n * Fetch a video or playlist link using the supplied ID\r\n * @param id ID\r\n * @param playlist is playlist true/false\r\n */\r\nvar getLink = function (id, playlist) {\r\n    if (playlist === void 0) { playlist = false; }\r\n    return (playlist ? 'https://www.youtube.com/playlist?list=' : 'https://youtu.be/') + id;\r\n};\r\nvar getBiggestThumbnail = function (thumbnails) {\r\n    return 'https:' + thumbnails.shift().url.split('=').shift() + '=s0?imgmax=0';\r\n};\r\n/**\r\n * Extract channel render data from the search results\r\n * @param channel Channel Renderer\r\n */\r\nexports.getChannelRenderData = function (channel) {\r\n    var id = channel.channelId;\r\n    var handle = exports.getChannelHandle(channel);\r\n    return {\r\n        id: id,\r\n        name: channel.title.simpleText,\r\n        link: getChannelLink(id, handle),\r\n        handle: handle,\r\n        verified: isVerified(channel),\r\n        thumbnail: getBiggestThumbnail(channel.thumbnail.thumbnails),\r\n        description: compress(channel.descriptionSnippet),\r\n        videoCount: getVideoCount(channel),\r\n        subscribers: getSubscriberCount(channel),\r\n        subscriberCount: convertSubs(channel)\r\n    };\r\n};\r\n/**\r\n * Attempt to resolve the channel's handle. Returns null if no custom handle is found.\r\n * @param channel Channel Renderer\r\n * @returns handle or null\r\n */\r\nexports.getChannelHandle = function (channel) {\r\n    var url = channel.navigationEndpoint.browseEndpoint.canonicalBaseUrl;\r\n    return url.startsWith('/@') ? url.substr(1) : null;\r\n};\r\n/**\r\n * Fetch basic information about the channel\r\n * @param video Video Renderer\r\n */\r\nexports.getChannelData = function (video) {\r\n    var channel = (video.ownerText || video.longBylineText)['runs'][0];\r\n    var handle = exports.getChannelHandle(channel);\r\n    var id = channel.navigationEndpoint.browseEndpoint.browseId;\r\n    return {\r\n        id: id,\r\n        name: channel.text,\r\n        link: getChannelLink(id, handle),\r\n        handle: handle,\r\n        verified: isVerified(video),\r\n        thumbnail: getChannelThumbnail(video)\r\n    };\r\n};\r\n/**\r\n * Get the playlist thumbnail (the first video in the list)\r\n * @param result Playlist Renderer\r\n */\r\nvar getPlaylistThumbnail = function (result) {\r\n    return getVideoThumbnail(result.navigationEndpoint.watchEndpoint.videoId);\r\n};\r\n/**\r\n * Similar to getResultData, but with minor changes for playlists\r\n * @param result Playlist Renderer\r\n */\r\nvar getPlaylistResultData = function (result) {\r\n    var id = result.playlistId;\r\n    return {\r\n        id: id,\r\n        title: result.title.simpleText,\r\n        link: getLink(id, true),\r\n        thumbnail: getPlaylistThumbnail(result),\r\n        channel: exports.getChannelData(result)\r\n    };\r\n};\r\n/**\r\n * Fetch the default result data included in all result types\r\n * @param result Video Renderer\r\n */\r\nvar getResultData = function (result) {\r\n    return {\r\n        id: result.videoId,\r\n        title: compress(result.title),\r\n        link: getLink(result.videoId, false),\r\n        thumbnail: getVideoThumbnail(result.videoId),\r\n        channel: exports.getChannelData(result)\r\n    };\r\n};\r\n/**\r\n * Extract information about a video in a playlist\r\n * @param child Child Renderer\r\n */\r\nvar getPlaylistVideo = function (child) {\r\n    return {\r\n        id: child.videoId,\r\n        title: child.title.simpleText,\r\n        link: getLink(child.videoId),\r\n        duration: parseDuration(child.lengthText.simpleText),\r\n        durationString: child.lengthText.simpleText,\r\n        thumbnail: getVideoThumbnail(child.videoId)\r\n    };\r\n};\r\nvar getVideoDescription = function (result) {\r\n    try {\r\n        return compress(result.detailedMetadataSnippets[0]['snippetText']) || result.descriptionSnippet || '';\r\n    }\r\n    catch (error) {\r\n        return '';\r\n    }\r\n};\r\n/**\r\n * Extract all information required for the \"Video\" result type\r\n * @param result Video Renderer\r\n */\r\nexports.getVideoData = function (result) {\r\n    return __assign(__assign({}, getResultData(result)), { description: getVideoDescription(result), views: getViews(result), uploaded: getUploadDate(result), duration: result.lengthText ? parseDuration(result.lengthText.simpleText) : 0, durationString: result.lengthText ? result.lengthText.simpleText : '0' });\r\n};\r\n/**\r\n * Extract all playlist information from the renderer\r\n * @param result Playlist Renderer\r\n */\r\nexports.getPlaylistData = function (result) {\r\n    var cvideos = [];\r\n    // Loop through any visible child videos and extract the data\r\n    result.videos.map(function (video) {\r\n        try {\r\n            cvideos.push(getPlaylistVideo(video['childVideoRenderer']));\r\n        }\r\n        catch (e) { }\r\n    });\r\n    return __assign(__assign({}, getPlaylistResultData(result)), { videoCount: +result['videoCount'], videos: cvideos });\r\n};\r\nexports.getStreamData = function (result) {\r\n    return __assign(__assign({}, getResultData(result)), { watching: getWatchers(result) });\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/scrape-youtube@2.4.0/node_modules/scrape-youtube/lib/parser.js\n");

/***/ })

};
;